{
    "nodes": [
        {
            "pos_x": -787.0,
            "pos_y": 214.0,
            "arranged_pos_x": -2.0,
            "arranged_pos_y": -2.0,
            "user_size_x": 0.0,
            "user_size_y": 0.0,
            "id": 24,
            "type_id": 1,
            "softbody_node_id": 29
        },
        {
            "pos_x": 325.0,
            "pos_y": 10.0,
            "arranged_pos_x": -2.0,
            "arranged_pos_y": -2.0,
            "user_size_x": 476.0,
            "user_size_y": 352.0,
            "id": 26,
            "type_id": 4,
            "source_code": "int srcDx=0, srcDy=1; // delta XY\nint srcAx=2, srcAy=3; // average XY\n\nvoid step() {\n    int avgSize = int(Read(8, 0)); // read config\n    Write(8, float(avgSize)); // write config\n\n   Write(0, Avg(srcDx, 0, avgSize)); // avg of delta X\n   Write(1, Avg(srcDy, 0, avgSize)); // avg of delta Y\n\n   Write(2, Delta(srcAx, 0)); // delta of avg X\n   Write(3, Delta(srcAy, 0)); // delta of avg Y\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////// generic moving average //////\n\nfloat Avg(int src, int pos, int count){\n float total=0;\n for (int i=0;i<count;++i){\n  total += (Read(src,pos-i)\n          +Read(src,pos-i-1))/2.0;\n }\n return total/ float(count);\n}\n\n/////// delta with previous //////\n\nfloat Delta(int slot, int idx) {\n   return Read(slot, idx)-Read(slot,idx-1);\n}"
        },
        {
            "pos_x": 1430.0,
            "pos_y": 98.0,
            "arranged_pos_x": 194.0,
            "arranged_pos_y": 604.0,
            "user_size_x": 246.0,
            "user_size_y": 216.0,
            "id": 27,
            "type_id": 8,
            "zoom": 300000.0,
            "grid_size": 0.00007000000186963007
        },
        {
            "pos_x": 934.0,
            "pos_y": -226.0,
            "arranged_pos_x": 194.0,
            "arranged_pos_y": 394.0,
            "user_size_x": 242.0,
            "user_size_y": 200.0,
            "id": 29,
            "type_id": 8,
            "zoom": 300000.0,
            "grid_size": 0.00007000000186963007
        },
        {
            "pos_x": -190.0,
            "pos_y": -33.0,
            "arranged_pos_x": -2.0,
            "arranged_pos_y": -2.0,
            "user_size_x": 354.0,
            "user_size_y": 336.0,
            "id": 30,
            "type_id": 4,
            "source_code": "int srcX=0, srcY=1;\nint AVG_SIZE = 25;\nvoid step() {\n\n  Write(0, Delta(srcX, 0)); // deltaX \n  Write(1, Delta(srcY, 0)); // deltaY\n\n  Write(2, Avg(srcX,0,AVG_SIZE)); // avg pos X\n  Write(3, Avg(srcY,0,AVG_SIZE)); // avg pos Y\n\n\n\n// delta diff XY\n  Write(4, Delta(srcX, 0)-Delta(srcX,-1)); \n  Write(5, Delta(srcY, 0)-Delta(srcY,-1)); \n\n  Write(8, AVG_SIZE); // Config\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////// generic moving average //////\n\nfloat Avg(int src, int pos, int count){\n float total=0;\n for (int i=0;i<count;++i){\n  total += (Read(src,pos-i)\n          +Read(src,pos-i-1))/2.0;\n }\n return total/ float(count);\n}\n\n/////// delta with previous //////\n\nfloat Delta(int slot, int idx) {\n   return Read(slot, idx)-Read(slot,idx-1);\n}"
        },
        {
            "pos_x": 204.0,
            "pos_y": 414.0,
            "arranged_pos_x": -1.0,
            "arranged_pos_y": -1.0,
            "user_size_x": 100.0,
            "user_size_y": 30.0,
            "id": 31,
            "type_id": 9
        },
        {
            "pos_x": 955.0,
            "pos_y": 252.0,
            "arranged_pos_x": -2.0,
            "arranged_pos_y": -2.0,
            "user_size_x": 250.0,
            "user_size_y": 200.0,
            "id": 32,
            "type_id": 4,
            "source_code": "\nvoid step() {\n // config\n int avgSize = int(Read(8, 0));\n\n    // avg of delta of avgXY\n    Write(0, Avg(0,0,avgSize));\n    Write(1, Avg(1,0,avgSize));\n}\n\n\n\n\n\n\n\n\n\n\n\n\n/////// generic moving average //////\n\nfloat Avg(int src, int pos, int count){\n float total=0;\n for (int i=0;i<count;++i){\n  total += (Read(src,pos-i)\n          +Read(src,pos-i-1))/2.0;\n }\n return total/ float(count);\n}"
        },
        {
            "pos_x": -507.0,
            "pos_y": 414.0,
            "arranged_pos_x": -2.0,
            "arranged_pos_y": -2.0,
            "user_size_x": 328.0,
            "user_size_y": 192.0,
            "id": 35,
            "type_id": 4,
            "source_code": "int srcFx=0, srcFy=1; // Forces\nint srcVx=2, srcVy=3; // Velocities\n\nvoid step() {\n  Write(0, Delta(srcFx, 0)); // delta forceX \n  Write(1, Delta(srcFy, 0)); // delta forceY\n\n  Write(4, Delta(srcVx, 0)); // delta veloX \n  Write(5, Delta(srcVy, 0)); // delta veloY\n\n  Write(8, 0.0); // constant 0\n}\n\n\n\n\n\n\n\n\n\n\n\n/////// generic moving average //////\n\nfloat Avg(int src, int pos, int count){\n float total=0;\n for (int i=0;i<count;++i){\n  total += (Read(src,pos-i)\n          +Read(src,pos-i-1))/2.0;\n }\n return total/ float(count);\n}\n\n/////// delta with previous //////\n\nfloat Delta(int slot, int idx) {\n   return Read(slot, idx)-Read(slot,idx-1);\n}"
        },
        {
            "pos_x": 349.0,
            "pos_y": 688.0,
            "arranged_pos_x": 1299.0,
            "arranged_pos_y": 386.0,
            "user_size_x": 200.0,
            "user_size_y": 200.0,
            "id": 36,
            "type_id": 8,
            "zoom": 300000.0,
            "grid_size": 0.00007000000186963007
        },
        {
            "pos_x": 353.0,
            "pos_y": 412.0,
            "arranged_pos_x": 1301.0,
            "arranged_pos_y": 592.0,
            "user_size_x": 200.0,
            "user_size_y": 200.0,
            "id": 38,
            "type_id": 8,
            "zoom": 1000.0,
            "grid_size": 0.009999999776482582
        },
        {
            "pos_x": -1.0,
            "pos_y": 770.0,
            "arranged_pos_x": 515.0,
            "arranged_pos_y": 694.0,
            "user_size_x": 292.0,
            "user_size_y": 270.0,
            "id": 39,
            "type_id": 8,
            "zoom": 3000.0,
            "grid_size": 0.009999999776482582
        },
        {
            "pos_x": 945.0,
            "pos_y": 546.0,
            "arranged_pos_x": -1.0,
            "arranged_pos_y": -1.0,
            "user_size_x": 100.0,
            "user_size_y": 30.0,
            "id": 40,
            "type_id": 9
        }
    ],
    "links": [
        {
            "node_src_id": 24,
            "node_dst_id": 30,
            "slot_src": 0,
            "slot_dst": 0
        },
        {
            "node_src_id": 24,
            "node_dst_id": 30,
            "slot_src": 1,
            "slot_dst": 1
        },
        {
            "node_src_id": 30,
            "node_dst_id": 26,
            "slot_src": 8,
            "slot_dst": 8
        },
        {
            "node_src_id": 30,
            "node_dst_id": 31,
            "slot_src": 8,
            "slot_dst": 0
        },
        {
            "node_src_id": 30,
            "node_dst_id": 29,
            "slot_src": 0,
            "slot_dst": 0
        },
        {
            "node_src_id": 30,
            "node_dst_id": 29,
            "slot_src": 1,
            "slot_dst": 1
        },
        {
            "node_src_id": 30,
            "node_dst_id": 26,
            "slot_src": 0,
            "slot_dst": 0
        },
        {
            "node_src_id": 30,
            "node_dst_id": 26,
            "slot_src": 1,
            "slot_dst": 1
        },
        {
            "node_src_id": 26,
            "node_dst_id": 29,
            "slot_src": 0,
            "slot_dst": 4
        },
        {
            "node_src_id": 26,
            "node_dst_id": 29,
            "slot_src": 1,
            "slot_dst": 5
        },
        {
            "node_src_id": 30,
            "node_dst_id": 26,
            "slot_src": 2,
            "slot_dst": 2
        },
        {
            "node_src_id": 26,
            "node_dst_id": 27,
            "slot_src": 2,
            "slot_dst": 0
        },
        {
            "node_src_id": 26,
            "node_dst_id": 27,
            "slot_src": 3,
            "slot_dst": 1
        },
        {
            "node_src_id": 26,
            "node_dst_id": 32,
            "slot_src": 8,
            "slot_dst": 8
        },
        {
            "node_src_id": 26,
            "node_dst_id": 32,
            "slot_src": 2,
            "slot_dst": 0
        },
        {
            "node_src_id": 26,
            "node_dst_id": 32,
            "slot_src": 3,
            "slot_dst": 1
        },
        {
            "node_src_id": 32,
            "node_dst_id": 27,
            "slot_src": 0,
            "slot_dst": 4
        },
        {
            "node_src_id": 32,
            "node_dst_id": 27,
            "slot_src": 1,
            "slot_dst": 5
        },
        {
            "node_src_id": 24,
            "node_dst_id": 35,
            "slot_src": 3,
            "slot_dst": 0
        },
        {
            "node_src_id": 24,
            "node_dst_id": 35,
            "slot_src": 4,
            "slot_dst": 1
        },
        {
            "node_src_id": 35,
            "node_dst_id": 36,
            "slot_src": 0,
            "slot_dst": 0
        },
        {
            "node_src_id": 35,
            "node_dst_id": 36,
            "slot_src": 1,
            "slot_dst": 1
        },
        {
            "node_src_id": 30,
            "node_dst_id": 26,
            "slot_src": 3,
            "slot_dst": 3
        },
        {
            "node_src_id": 35,
            "node_dst_id": 36,
            "slot_src": 8,
            "slot_dst": 5
        },
        {
            "node_src_id": 35,
            "node_dst_id": 36,
            "slot_src": 8,
            "slot_dst": 4
        },
        {
            "node_src_id": 35,
            "node_dst_id": 38,
            "slot_src": 0,
            "slot_dst": 0
        },
        {
            "node_src_id": 35,
            "node_dst_id": 38,
            "slot_src": 1,
            "slot_dst": 1
        },
        {
            "node_src_id": 35,
            "node_dst_id": 38,
            "slot_src": 8,
            "slot_dst": 4
        },
        {
            "node_src_id": 35,
            "node_dst_id": 38,
            "slot_src": 8,
            "slot_dst": 5
        },
        {
            "node_src_id": 24,
            "node_dst_id": 35,
            "slot_src": 6,
            "slot_dst": 2
        },
        {
            "node_src_id": 24,
            "node_dst_id": 35,
            "slot_src": 7,
            "slot_dst": 3
        },
        {
            "node_src_id": 35,
            "node_dst_id": 39,
            "slot_src": 4,
            "slot_dst": 0
        },
        {
            "node_src_id": 35,
            "node_dst_id": 39,
            "slot_src": 5,
            "slot_dst": 1
        },
        {
            "node_src_id": 35,
            "node_dst_id": 39,
            "slot_src": 8,
            "slot_dst": 4
        },
        {
            "node_src_id": 35,
            "node_dst_id": 39,
            "slot_src": 8,
            "slot_dst": 5
        },
        {
            "node_src_id": 26,
            "node_dst_id": 40,
            "slot_src": 8,
            "slot_dst": 0
        }
    ],
    "udp_pos_node": {
        "pos_x": -2044.0,
        "pos_y": 399.0,
        "arranged_pos_x": -2.0,
        "arranged_pos_y": -2.0,
        "user_size_x": 0.0,
        "user_size_y": 0.0,
        "id": -2147483646,
        "type_id": 7
    },
    "udp_acc_node": {
        "pos_x": -1998.0,
        "pos_y": 511.0,
        "arranged_pos_x": -2.0,
        "arranged_pos_y": -2.0,
        "user_size_x": 0.0,
        "user_size_y": 0.0,
        "id": -2147483644,
        "type_id": 7
    },
    "udp_orient_node": {
        "pos_x": -2154.0,
        "pos_y": 565.0,
        "arranged_pos_x": -2.0,
        "arranged_pos_y": -2.0,
        "user_size_x": 0.0,
        "user_size_y": 0.0,
        "id": -2147483643,
        "type_id": 7
    },
    "udp_velo_node": {
        "pos_x": -2138.0,
        "pos_y": 471.0,
        "arranged_pos_x": -2.0,
        "arranged_pos_y": -2.0,
        "user_size_x": 0.0,
        "user_size_y": 0.0,
        "id": -2147483645,
        "type_id": 7
    }
}